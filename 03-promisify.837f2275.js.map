{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAEA,MAAMA,EAAQC,GACL,IAAIC,QAAQC,IACjBC,WAAW,KACTD,EAAQF,IACPA,KAIDI,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAsCjB,MAAMK,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkB,CAACC,EAAaC,EAAWC,KACzCnB,MAAAA,EAAQU,EAA0B,IAAK,KAEtC,OAAA,IAAIR,QAAQ,CAACC,EAASiB,KAC3BhB,WAAW,KACUS,KAAKE,SAAW,IAGjCZ,EAAQ,CAAEkB,GAAIJ,EAAYI,GAAIf,KAAMN,IAEtCoB,EAAOH,EAAYI,KAClBrB,MAIDsB,EAAa,CAACD,EAAIf,KACtBC,QAAQC,mBAAmBa,kBAAmBf,QAG1CiB,EAAWF,IACfd,QAAQiB,qCAAqCH,+BAa/CL,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAC/BhB,KAAKa,GACLI,MAAMH","file":"03-promisify.837f2275.js","sourceRoot":"../src","sourcesContent":["///////////////////// 1 Substack ////////////////////////\n\nconst delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n///////////////////// 2 Substack ////////////////////////\n\n// const users = [\n//   { name: 'Mango', active: true },\n//   { name: 'Poly', active: false },\n//   { name: 'Ajax', active: true },\n//   { name: 'Lux', active: false },\n// ];\n\n// const toggleUserState = (allUsers, userName) => {\n  \n//   return new Promise (resolve => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user,\n//   )\n//   resolve(updatedUsers);});\n\n  \n// };\n\n// const logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\n// toggleUserState(users, 'Mango').then(logger);\n// toggleUserState(users, 'Lux').then(logger);\n\n///////////////////// 3 Substack ////////////////////////\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      }\n      reject(transaction.id);\n    }, delay);\n  });\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// /*\n//  * Работает так\n//  */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n// /*\n//  * Должно работать так\n//  */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\n// makeTransaction({ id: 71, amount: 230 })\n//   .then(logSuccess)\n//   .catch(logError);\n\n// makeTransaction({ id: 72, amount: 75 })\n//   .then(logSuccess)\n//   .catch(logError);\n\n// makeTransaction({ id: 73, amount: 100 })\n//   .then(logSuccess)\n//   .catch(logError);"]}